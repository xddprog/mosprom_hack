#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from backend.infrastructure.database.connection import get_async_session
from backend.utils.test_db import init_tables, clear_database, reset_database
from sqlalchemy import select, func
from backend.infrastructure.database.models import Company, University, User, Student, Tag, Vacancy, Application


async def demo_database_stats():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with get_async_session() as session:
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        companies_count = (await session.execute(select(func.count(Company.id)))).scalar()
        universities_count = (await session.execute(select(func.count(University.id)))).scalar()
        users_count = (await session.execute(select(func.count(User.id)))).scalar()
        students_count = (await session.execute(select(func.count(Student.id)))).scalar()
        tags_count = (await session.execute(select(func.count(Tag.id)))).scalar()
        vacancies_count = (await session.execute(select(func.count(Vacancy.id)))).scalar()
        applications_count = (await session.execute(select(func.count(Application.id)))).scalar()
        
        print(f"   üè¢ –ö–æ–º–ø–∞–Ω–∏–π: {companies_count}")
        print(f"   üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤: {universities_count}")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"   üéì –°—Ç—É–¥–µ–Ω—Ç–æ–≤: {students_count}")
        print(f"   üè∑Ô∏è –¢–µ–≥–æ–≤: {tags_count}")
        print(f"   üíº –í–∞–∫–∞–Ω—Å–∏–π: {vacancies_count}")
        print(f"   üìù –ó–∞—è–≤–æ–∫: {applications_count}")


async def demo_random_data():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üé≤ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    from backend.utils.test_db import (
        generate_random_company, 
        generate_random_university,
        generate_random_user,
        generate_random_student,
        generate_random_tag,
        generate_random_vacancy,
        generate_random_application
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    print("\nüè¢ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–ø–∞–Ω–∏–π:")
    for i in range(3):
        company = generate_random_company()
        print(f"   {i+1}. {company['name']} ({company['industry']})")
    
    print("\nüéì –ü—Ä–∏–º–µ—Ä—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤:")
    for i in range(3):
        university = generate_random_university()
        print(f"   {i+1}. {university['name']}")
    
    print("\nüë• –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    for i in range(3):
        user = generate_random_user()
        print(f"   {i+1}. {user['full_name']} ({user['email']}) - {user['role']}")
    
    print("\nüéì –ü—Ä–∏–º–µ—Ä—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
    for i in range(3):
        student = generate_random_student(1)  # university_id = 1
        print(f"   {i+1}. {student['full_name']} - {student['course']} –∫—É—Ä—Å, {student['specialization']}")
    
    print("\nüè∑Ô∏è –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤:")
    for i in range(5):
        tag = generate_random_tag()
        print(f"   {i+1}. {tag['name']}")
    
    print("\nüíº –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–π:")
    for i in range(3):
        vacancy = generate_random_vacancy(1)  # company_id = 1
        print(f"   {i+1}. {vacancy['title']} - {vacancy['region']}, {vacancy['min_salary']}-{vacancy['max_salary']} —Ä—É–±.")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await demo_database_stats()
    
    print("\n" + "=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await demo_random_data()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   python init_test_db.py")
    print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    print("   python init_test_db.py --reset")


if __name__ == "__main__":
    asyncio.run(main())

